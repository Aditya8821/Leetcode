class Solution:
        #Without Using Sorting i.e Complexity:O(n)
        i=0
        start,end=0,1
        merged=[]
        while i<len(intervals) and intervals[i][end]<newInterval[start]:
            merged.append(intervals[i])
            i+=1
        while i<len(intervals) and intervals[i][start]<=newInterval[end]:
            newInterval[start]=min(intervals[i][start],newInterval[start])
            newInterval[end]=max(intervals[i][end],newInterval[end])
            i+=1
        merged.append(newInterval)
        while i<len(intervals):
            merged.append(intervals[i])
            i+=1
        return merged
    
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        if(not len(intervals)):
            return [newInterval]
        intervals.append(newInterval)
        i = 1
        intervals.sort()
        while(i < len(intervals)):
            if(intervals[i][0] <= intervals[i-1][1]):
                intervals[i] = [intervals[i-1][0],max(intervals[i-1][1],intervals[i][1])]
                del intervals[i-1]
            else:
                i += 1
        return intervals
